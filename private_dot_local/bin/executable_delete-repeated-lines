#!/usr/bin/env python3
"""A script that reads a text file and deletes every unique line
that is repeated at least once, except for the first instance
of that line from top to bottom and whitespace."""

import argparse

import sys
from os import path, rename


def get_args():
    """Initialize argument parser object."""
    description = "Deletes multiple ocurrences of every single unique line."
    args = argparse.ArgumentParser(description=description)
    args.add_argument("files", metavar="FILE(S)", nargs="+")
    args.add_argument(
        "-r", help="Specify a range of action.", metavar="N", nargs=2, type=int
    )
    args.add_argument("-o", help="Overwrite the file.", action="store_true")
    return args


def process_args(parser):
    """Checks for possible parser errors."""
    # Print help and exit if no arguments are given
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit()

    # Parse args after processing exit instructions.
    args = parser.parse_args()

    # Validate range numbers.
    if args.r is not None:
        validate_range(args)

    for file in args.files:
        process_file(file, args)


def validate_range(args):
    """Check whether range numbers are valid."""
    if len(args.files) > 1:
        print("You can't specify a range when inputting multiple files.")
        sys.exit(128)

    elif (args.r[0] < 1) or (args.r[1] < 1):
        print("Range numbers must be equal or greater than one.")
        sys.exit(128)

    elif args.r[0] > args.r[1]:
        print("The end of the range must not be bigger than the start.")
        sys.exit(128)

    elif args.r[0] == args.r[1]:
        print("The two range numbers must not be the same number.")
        sys.exit(128)


def process_file(file_arg, args):
    """Process the current file in the loop."""
    file_path = path.abspath(file_arg)
    file_contents = read_contents(file_path)
    new_file = delete_lines(file_contents, args.r)

    # Check whether the file remained the same. And don't save anything if no
    # changes were made.
    if new_file != file_contents:
        write_to_file(file_path, new_file, args.o)
    else:
        filename = path.basename(file_path)
        print(f'"{filename}" doesn\'t have repeated lines.')


def print_line_length(file_contents):
    """Print how many lines the file has."""
    length = len(file_contents)
    print(f"Number of lines: {length}")


def read_contents(file_path):
    """Open the text file and store the lines in a list."""
    file_name = path.basename(file_path)
    try:
        print(f'Reading "{file_name}"...')
        with open(file_path, encoding="utf-8") as fileobj:
            file_contents = fileobj.readlines()
    except FileNotFoundError:
        print(f'"{file_name}" doesn\'t exist.')
        sys.exit(1)
    except IsADirectoryError:
        print(f'"{file_name}" is a directory')
        sys.exit(1)
    else:
        print_line_length(file_contents)
        return file_contents


def delete_lines(file_contents, range_nums):
    """Check for several instances of identical lines of text and remove
    them.
    """
    # Store new file contents.
    new_file = []
    # Store a boolean value for each of the file's lines in a dictionary. This
    # reduces the number of operations significantly: from O(n^2) to O(n),
    # or something like that.
    line_hashmap = {}

    # Create a slice of the file's contents if a range is specified.
    if range_nums:
        line_number = range_nums[0]
        # Range numbers start from one, indexing doesn't.
        range_nums[0] -= 1
        lines = file_contents[range_nums[0] : range_nums[1]]
    else:
        line_number = 1
        lines = file_contents

    print("Deleting repeated lines...")
    for line in lines:
        # If the line is not in the boolean dictionary, store it in the new
        # file, and keep newlines. Otherwise, don't store it, just print it.
        if (not line_hashmap.get(line, False)) or (line == "\n"):
            line_hashmap[line] = True
            new_file.append(line)
        else:
            print(f"-> Deleted line #{line_number}:\n{line}", end="")
        line_number += 1

    # If a range was specified, merge the unaffected parts of the file
    # with the sliced range.
    if range_nums:
        new_file = (
            file_contents[: range_nums[0]] + new_file + file_contents[range_nums[1] :]
        )

    return new_file


def write_to_file(file_path, new_file, overwrite):
    """Write changes to a file."""
    # Create a backup if the -o flag wasn't specified.
    if not overwrite:
        print("Making a backup of the old file...")
        rename(file_path, file_path + ".bk")

    print("Saving new contents...")
    with open(file_path, "w", encoding="utf-8") as fileobj:
        for line in new_file:
            fileobj.write(line)

    print_line_length(new_file)


def main():
    """Main function."""
    parser = get_args()
    process_args(parser)


if __name__ == "__main__":
    main()
